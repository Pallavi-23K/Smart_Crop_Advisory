from flask import Flask, render_template, request, jsonify
import mysql.connector
import pandas as pd
import os

app = Flask(__name__)
os.makedirs("uploads", exist_ok=True)

# ------------------ DATABASE CONNECTION ------------------
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Karthik@26",
    database="soil_db"
)
cursor = db.cursor(dictionary=True)

# ------------------ TRANSLATIONS ------------------
translations = {
    "acidic": {
        "en": "тЪая╕П Soil acidic тЖТ Apply lime before sowing.",
        "kn": "тЪая╕П р▓ор▓гр│Нр▓гр│Б р▓Жр▓ор│Нр▓▓р│Ар▓пр▓╡р▓╛р▓Чр▓┐р▓жр│Ж тЖТ р▓мр│Ар▓Ь р▓мр▓┐р▓др│Нр▓др│Бр▓╡ р▓ор│Кр▓жр▓▓р│Б р▓╕р│Бр▓гр│Нр▓г р▓╣р▓Ър│Нр▓Ър▓┐.",
        "hi": "тЪая╕П рдорд┐рдЯреНрдЯреА рдЕрдореНрд▓реАрдп рд╣реИ тЖТ рдмреБрд╡рд╛рдИ рд╕реЗ рдкрд╣рд▓реЗ рдЪреБрдирд╛ рдбрд╛рд▓реЗрдВред",
        "te": "тЪая╕П р░ир▒Зр░▓ р░Жр░ор▒Нр░▓р░д р░Ор░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ тЖТ р░╡р░┐р░др▒Нр░др░ир░╛р░ир░┐р░Хр░┐ р░ор▒Бр░Вр░жр▒Б р░Ър▒Бр░ир▒Нр░ир░В р░╡р▒Зр░пр░Вр░бр░┐.",
        "ta": "тЪая╕П роорогрпН роЕрооро┐ро▓рооро╛роХ роЙро│рпНро│родрпБ тЖТ ро╡ро┐родрпИроХрпНроХрпБроорпН роорпБройрпН роЪрпБрогрпНрогро╛роорпНрокрпБ рокрпЛроЯро╡рпБроорпН.",
        "ml": "тЪая╕П р┤ор┤гр╡Нр┤гр╡Н р┤Ер┤ор╡Нр┤▓р╡Ар┤пр┤В тЖТ р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др┤┐р┤ир╡Н р┤ор╡Бр┤ор╡Нр┤кр╡Н р┤Ър╡Бр┤гр╡Нр┤гр┤╛р┤ор╡Нр┤кр╡Н р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
    },
    "nitrogen": {
        "en": "тЪая╕П Nitrogen low тЖТ Apply Urea.",
        "kn": "тЪая╕П р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н р▓Хр▓бр▓┐р▓ор│Ж тЖТ р▓пр│Вр▓░р▓┐р▓пр▓╛ р▓╣р▓Ър│Нр▓Ър▓┐.",
        "hi": "тЪая╕П рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХрдо рд╣реИ тЖТ рдпреВрд░рд┐рдпрд╛ рдбрд╛рд▓реЗрдВред",
        "te": "тЪая╕П р░ир░др▒Нр░░р░Ьр░ир░┐ р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ тЖТ р░пр▒Вр░░р░┐р░пр░╛ р░╡р▒Зр░пр░Вр░бр░┐.",
        "ta": "тЪая╕П роирпИроЯрпНро░роЬройрпН роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ тЖТ ропрпВро░ро┐ропро╛ рокрпЛроЯро╡рпБроорпН.",
        "ml": "тЪая╕П р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗ р┤Хр╡Бр┤▒р┤╡р╡Н тЖТ р┤пр╡Вр┤░р┤┐р┤п р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
    },
    "phosphorus": {
        "en": "тЪая╕П Phosphorus low тЖТ Apply DAP.",
        "kn": "тЪая╕П р▓лр▓╛р▓╕р│Нр▓лр▓░р▓╕р│Н р▓Хр▓бр▓┐р▓ор│Ж тЖТ р▓бр▓┐р▓Ор▓кр▓┐ р▓╣р▓Ър│Нр▓Ър▓┐.",
        "hi": "тЪая╕П рдлрд╛рд╕реНрдлреЛрд░рд╕ рдХрдо рд╣реИ тЖТ рдбреАрдПрдкреА рдбрд╛рд▓реЗрдВред",
        "te": "тЪая╕П р░лр░╛р░╕р▒Нр░лр░░р░╕р▒Н р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ тЖТ р░бр░┐р░Пр░кр▒А р░╡р▒Зр░пр░Вр░бр░┐.",
        "ta": "тЪая╕П рокро╛ро╕рпНрокро░ро╕рпН роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ тЖТ роЯро┐роПрокро┐ рокрпЛроЯро╡рпБроорпН.",
        "ml": "тЪая╕П р┤лр╡Лр┤╕р╡Нр┤лр┤▒р┤╕р╡Н р┤Хр╡Бр┤▒р┤╡р╡Н тЖТ р┤бр┤┐.р┤О.р┤кр┤┐ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
    },
    "potassium": {
        "en": "тЪая╕П Potassium low тЖТ Apply MOP.",
        "kn": "тЪая╕П р▓кр│Кр▓Яр▓╛р▓╖р▓┐р▓пр▓В р▓Хр▓бр▓┐р▓ор│Ж тЖТ р▓Ор▓ор│Н.р▓У.р▓кр▓┐ р▓╣р▓Ър│Нр▓Ър▓┐.",
        "hi": "тЪая╕П рдкреЛрдЯреИрд╢рд┐рдпрдо рдХрдо рд╣реИ тЖТ рдПрдордУрдкреА рдбрд╛рд▓реЗрдВред",
        "te": "тЪая╕П р░кр▒Кр░Яр░╛р░╖р░┐р░пр░В р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ тЖТ р░Ор░ор▒НтАМр░Ур░кр▒А р░╡р▒Зр░пр░Вр░бр░┐.",
        "ta": "тЪая╕П рокрпКроЯрпНроЯро╛роЪро┐ропроорпН роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ тЖТ роОроорпН.роУ.рокро┐ рокрпЛроЯро╡рпБроорпН.",
        "ml": "тЪая╕П р┤кр╡Кр┤Яр╡Нр┤Яр┤╛р┤╕р╡Нр┤пр┤В р┤Хр╡Бр┤▒р┤╡р╡Н тЖТ р┤Ор┤В.р┤Т.р┤кр┤┐ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
    },
    "healthy": {
        "en": "тЬЕ Soil is healthy ЁЯСН",
        "kn": "тЬЕ р▓ор▓гр│Нр▓гр│Б р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░р▓╡р▓╛р▓Чр▓┐р▓жр│Ж ЁЯСН",
        "hi": "тЬЕ рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╕реНрде рд╣реИ ЁЯСН",
        "te": "тЬЕ р░ир▒Зр░▓ р░Жр░░р▒Лр░Чр▒Нр░пр░Вр░Чр░╛ р░Йр░Вр░жр░┐ ЁЯСН",
        "ta": "тЬЕ роорогрпН роЖро░рпЛроХрпНроХро┐ропрооро╛роХ роЙро│рпНро│родрпБ ЁЯСН",
        "ml": "тЬЕ р┤ор┤гр╡Нр┤гр╡Н р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤Хр┤░р┤ор┤╛р┤гр╡Н ЁЯСН"
    }
}

# ------------------ HELPER ------------------
def get_recommendations(data, lang="en"):
    advice = []
    if float(data.get("ph", 7)) < 5.5:
        advice.append(translations["acidic"][lang])
    if float(data.get("nitrogen", 0)) < 150:
        advice.append(translations["nitrogen"][lang])
    if float(data.get("phosphorus", 0)) < 12:
        advice.append(translations["phosphorus"][lang])
    if float(data.get("potassium", 0)) < 150:
        advice.append(translations["potassium"][lang])
    if not advice:
        advice.append(translations["healthy"][lang])
    return advice

# ------------------ ROUTES ------------------
@app.route("/")
def home():
    return render_template("form.html")

@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.json
    lang = data.get("lang", "en")  # default English

    # Save into MySQL
    sql = """INSERT INTO soil_samples
    (farmer_name, contact, field_id, location, ph, ec, moisture, organic_carbon, nitrogen, phosphorus, potassium)
    VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
    cursor.execute(sql, (
        data.get("farmerName"), data.get("contact"), data.get("fieldId"),
        data.get("location"), data.get("ph"), data.get("ec"),
        data.get("moisture"), data.get("organic_carbon"), data.get("nitrogen"),
        data.get("phosphorus"), data.get("potassium")
    ))
    db.commit()

    # Multilingual recommendations
    advice = get_recommendations(data, lang)

    return jsonify({"recommendation": advice})

@app.route("/upload_csv", methods=["POST"])
def upload_csv():
    file = request.files["file"]
    lang = request.form.get("lang", "en")  # language from form
    filepath = os.path.join("uploads", file.filename)
    file.save(filepath)

    df = pd.read_csv(filepath)
    recommendations = []

    for _, row in df.iterrows():
        sql = """INSERT INTO soil_samples
        (farmer_name, contact, field_id, location, ph, ec, moisture, organic_carbon, nitrogen, phosphorus, potassium)
        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
        cursor.execute(sql, tuple(row))

        advice = get_recommendations(row, lang)
        recommendations.append({
            "farmer": row["farmer_name"],
            "field": row["field_id"],
            "recommendation": advice
        })

    db.commit()
    return jsonify({
        "message": translations["healthy"][lang],  # confirmation in local language
        "results": recommendations
    })

if __name__ == "__main__":
    app.run(debug=True)
